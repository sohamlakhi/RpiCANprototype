- write message/service interface package
- launch package with all dependencies
- ros2socketcan library package -> ament_cmake dependencies
- threadsafe queue package -> "
(need to go through cmake and ament_cmake tutorial) -> check f1tenth sim package cmakelists.txt

STEPS:
 - multithread the callbacks of timer and driver_callback OR use single thread executor on your own std::thread
 - use threadsafe queue to do work around this

 (use gdb/Valgrind)

 for now: just compile everything within the package (look at ament_cmake -> add as library). Then move to another package

 Multithread example -> Implemented Multithreaded Executor example #251
                    -> Add an example using multithreaded executors and callback groups #208
                    read callback groups from ros2 documentation

TRY: Mutually exclusive and Rentrant callback groups

You're using thread-safe queues just to be sure

add multithread stuff, edit cmakelists and packagexml, commit to git
run and debug (remove ros2socketCAN pkg for now)

TOMORROW: 
figure out cmake and compile code correctly
figure out CAN stuff and get it to work 

//ROS2 library --> https://answers.ros.org/question/357633/how-to-create-a-ros2-library/

TODO: fix ros2can cmakelists and package
      add packagea to CAN_sub
      fastforward merge through all git branches

Martin's push with header only 'library' implementation

WAYS TO ENCODE DATA:
- use to_string to encode data as character array (which is integer mapped). Drop terminator, transmit, add terminator and decode
- recast floating point as character array and use bitwise operators (shifting and masking) to extract and assign parts of the number. Do the reverse to decode number on arduino side 
- use bitset to extract bitstream and individually assign
- extract mantissa and exponent using re-interpret_cast (and figure some way of passing) https://stackoverflow.com/questions/5672960/how-can-i-extract-the-mantissa-of-a-double
